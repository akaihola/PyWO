#
# PyWO - Python Window Organizer
# Copyright 2010, Wojciech 'KosciaK' Pietrzok
#
# This file is part of PyWO.
#
# PyWO is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# PyWO is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with PyWO.  If not, see <http://www.gnu.org/licenses/>.
#

"""daemon.py - daemon mode for PyWO.

It works almost like any other service, except it doesn't start new thread.

"""

import logging
import signal
import time
import threading

from core import WindowManager
from config import Config
import actions
import services
import utils


__author__ = "Wojciech 'KosciaK' Pietrzok <kosciak@kosciak.net>"


log = logging.getLogger(__name__)
log.addHandler(utils.NullHandler())


SERVICES = []
FILENAME = ''
WM = WindowManager()


def setup(config):
    """Import and setup all services."""
    global FILENAME
    if not FILENAME:
        # First time start, we are im main-thread - register signal handlers
        signal.signal(signal.SIGINT, interrupt_handler)
        signal.signal(signal.SIGTERM, interrupt_handler)
        # and required actions
        actions.register(name='exit')(exit_pywo)
        actions.register(name='reload')(reload)
    FILENAME = config.filename
    global SERVICES
    SERVICES = []
    for service in services.all(config):
        SERVICES.append(service)
    for service in SERVICES:
        service.setup(config)


def start(loop=False):
    """Start all services."""
    for service in SERVICES:
        service.start()
    log.info('PyWO ready and running!')
    # Simple loop for keeping main-thread running and make signal handlers work
    while loop and len(threading.enumerate()) > 1: 
        time.sleep(0.5)


def stop():
    """Stop all services."""
    for service in SERVICES:
        service.stop()


def reload(win, config=None, *args):
    """Stop services, (re)load configuration file, and start again."""
    log.info('Reloading PyWO...')
    stop()
    filename = config or FILENAME
    log.info('Reloading configuration file: %s' % filename)
    config = Config(filename)
    setup(config)
    start()


def exit_pywo(*args):
    """Stop sevices, and exit PyWO."""
    log.info('Exiting PyWO...')
    stop() # stop all services
    WM.unlisten_all() # unregister all remaining EventHandlers


def interrupt_handler(sig, frame):
    """Handle signal generated by Ctrl-C and kill signal."""
    log.error('Interrupted!')
    signal.signal(signal.SIGINT, signal.SIG_IGN)
    signal.signal(signal.SIGTERM, signal.SIG_IGN)
    exit_pywo(True)

